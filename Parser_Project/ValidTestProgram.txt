#
# assignment
#
program Prog_simple_assign begin x := num end
program Prog_assign_add begin x := num * num2 end
program Prog_assign_mult begin x := 1 * 2 * 3 * 4 end
program Prog_assign_add begin x := 1 + 2 + 3 + 4 end
program Prog_assign_expr begin x := ( num > num1 ) end
#
# read tests
#
program Prog_simple_read begin read ( num ) end
program Prog_simple_read_mult begin read ( num , x , y ) end
program Prog_simple_mix begin read ( x , 1 , z ) end
#
# write tests
#
program Prog_simple_write begin write ( num ) end
program Prog_relational_write begin write ( num == num2 ) end
program Prog_relational_write_mult begin write ( num <= num2 , num3 > num4 ) end
program Prog_write_expr begin write ( num == x , 1 * 2 >= y - z ) end
#
# multiple programs statements
#
program Prog_stmts begin write ( num ) ; read ( var1 , var2 ) end
program Prog_stmts_two begin write ( num ) ; read ( var1 ) ; n := 1 end
#
# if statements
#
program Prog_simple_if begin if num > num2 then read ( var1 ) end
program Prog_if_else begin if num > num2 then read ( var1 ) else write ( num ) end
#
# while statements
#
program Prog_simple_while begin while 1 == 1 do read ( var ) end
#
# structured stmt test
#
program Prog_stuct_test begin begin read ( num ) end end
#
# error cases
#
program Prog_bad_relational begin x := ( num >< num1 ) end
program Prog_bad_if begin if a < b end
program Prog_bad_write begin write ( num1 end
program malformed_name begin n := 1 end
program Prog_missing_semi begin n := 1 read ( num ) end